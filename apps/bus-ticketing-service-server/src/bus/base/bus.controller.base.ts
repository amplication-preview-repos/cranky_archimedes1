/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BusService } from "../bus.service";
import { BusCreateInput } from "./BusCreateInput";
import { Bus } from "./Bus";
import { BusFindManyArgs } from "./BusFindManyArgs";
import { BusWhereUniqueInput } from "./BusWhereUniqueInput";
import { BusUpdateInput } from "./BusUpdateInput";

export class BusControllerBase {
  constructor(protected readonly service: BusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bus })
  async createBus(@common.Body() data: BusCreateInput): Promise<Bus> {
    return await this.service.createBus({
      data: {
        ...data,

        route: data.route
          ? {
              connect: data.route,
            }
          : undefined,

        station: data.station
          ? {
              connect: data.station,
            }
          : undefined,
      },
      select: {
        busNumber: true,
        capacity: true,
        createdAt: true,
        driverName: true,
        id: true,
        licenseNumber: true,

        route: {
          select: {
            id: true,
          },
        },

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bus] })
  @ApiNestedQuery(BusFindManyArgs)
  async buses(@common.Req() request: Request): Promise<Bus[]> {
    const args = plainToClass(BusFindManyArgs, request.query);
    return this.service.buses({
      ...args,
      select: {
        busNumber: true,
        capacity: true,
        createdAt: true,
        driverName: true,
        id: true,
        licenseNumber: true,

        route: {
          select: {
            id: true,
          },
        },

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bus(@common.Param() params: BusWhereUniqueInput): Promise<Bus | null> {
    const result = await this.service.bus({
      where: params,
      select: {
        busNumber: true,
        capacity: true,
        createdAt: true,
        driverName: true,
        id: true,
        licenseNumber: true,

        route: {
          select: {
            id: true,
          },
        },

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBus(
    @common.Param() params: BusWhereUniqueInput,
    @common.Body() data: BusUpdateInput
  ): Promise<Bus | null> {
    try {
      return await this.service.updateBus({
        where: params,
        data: {
          ...data,

          route: data.route
            ? {
                connect: data.route,
              }
            : undefined,

          station: data.station
            ? {
                connect: data.station,
              }
            : undefined,
        },
        select: {
          busNumber: true,
          capacity: true,
          createdAt: true,
          driverName: true,
          id: true,
          licenseNumber: true,

          route: {
            select: {
              id: true,
            },
          },

          station: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBus(
    @common.Param() params: BusWhereUniqueInput
  ): Promise<Bus | null> {
    try {
      return await this.service.deleteBus({
        where: params,
        select: {
          busNumber: true,
          capacity: true,
          createdAt: true,
          driverName: true,
          id: true,
          licenseNumber: true,

          route: {
            select: {
              id: true,
            },
          },

          station: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
