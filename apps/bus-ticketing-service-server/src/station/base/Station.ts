/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Bus } from "../../bus/base/Bus";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { Route } from "../../route/base/Route";
import { StationExitPaper } from "../../stationExitPaper/base/StationExitPaper";
import { Ticket } from "../../ticket/base/Ticket";
import { User } from "../../user/base/User";

@ObjectType()
class Station {
  @ApiProperty({
    required: false,
    type: () => [Bus],
  })
  @ValidateNested()
  @Type(() => Bus)
  @IsOptional()
  buses?: Array<Bus>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Route],
  })
  @ValidateNested()
  @Type(() => Route)
  @IsOptional()
  routes?: Array<Route>;

  @ApiProperty({
    required: false,
    type: () => [StationExitPaper],
  })
  @ValidateNested()
  @Type(() => StationExitPaper)
  @IsOptional()
  stationExitPapers?: Array<StationExitPaper>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  stationName!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Ticket],
  })
  @ValidateNested()
  @Type(() => Ticket)
  @IsOptional()
  tickets?: Array<Ticket>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [User],
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  users?: Array<User>;
}

export { Station as Station };
