/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StationService } from "../station.service";
import { StationCreateInput } from "./StationCreateInput";
import { Station } from "./Station";
import { StationFindManyArgs } from "./StationFindManyArgs";
import { StationWhereUniqueInput } from "./StationWhereUniqueInput";
import { StationUpdateInput } from "./StationUpdateInput";
import { BusFindManyArgs } from "../../bus/base/BusFindManyArgs";
import { Bus } from "../../bus/base/Bus";
import { BusWhereUniqueInput } from "../../bus/base/BusWhereUniqueInput";
import { RouteFindManyArgs } from "../../route/base/RouteFindManyArgs";
import { Route } from "../../route/base/Route";
import { RouteWhereUniqueInput } from "../../route/base/RouteWhereUniqueInput";
import { StationExitPaperFindManyArgs } from "../../stationExitPaper/base/StationExitPaperFindManyArgs";
import { StationExitPaper } from "../../stationExitPaper/base/StationExitPaper";
import { StationExitPaperWhereUniqueInput } from "../../stationExitPaper/base/StationExitPaperWhereUniqueInput";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { TicketWhereUniqueInput } from "../../ticket/base/TicketWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

export class StationControllerBase {
  constructor(protected readonly service: StationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Station })
  async createStation(
    @common.Body() data: StationCreateInput
  ): Promise<Station> {
    return await this.service.createStation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        stationName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Station] })
  @ApiNestedQuery(StationFindManyArgs)
  async stations(@common.Req() request: Request): Promise<Station[]> {
    const args = plainToClass(StationFindManyArgs, request.query);
    return this.service.stations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        stationName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Station })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async station(
    @common.Param() params: StationWhereUniqueInput
  ): Promise<Station | null> {
    const result = await this.service.station({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        stationName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Station })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStation(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() data: StationUpdateInput
  ): Promise<Station | null> {
    try {
      return await this.service.updateStation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          stationName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Station })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStation(
    @common.Param() params: StationWhereUniqueInput
  ): Promise<Station | null> {
    try {
      return await this.service.deleteStation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          stationName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/buses")
  @ApiNestedQuery(BusFindManyArgs)
  async findBuses(
    @common.Req() request: Request,
    @common.Param() params: StationWhereUniqueInput
  ): Promise<Bus[]> {
    const query = plainToClass(BusFindManyArgs, request.query);
    const results = await this.service.findBuses(params.id, {
      ...query,
      select: {
        busNumber: true,
        capacity: true,
        createdAt: true,
        driverName: true,
        id: true,
        licenseNumber: true,

        route: {
          select: {
            id: true,
          },
        },

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/buses")
  async connectBuses(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: BusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buses: {
        connect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/buses")
  async updateBuses(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: BusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buses: {
        set: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/buses")
  async disconnectBuses(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: BusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buses: {
        disconnect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/routes")
  @ApiNestedQuery(RouteFindManyArgs)
  async findRoutes(
    @common.Req() request: Request,
    @common.Param() params: StationWhereUniqueInput
  ): Promise<Route[]> {
    const query = plainToClass(RouteFindManyArgs, request.query);
    const results = await this.service.findRoutes(params.id, {
      ...query,
      select: {
        createdAt: true,
        destination: true,
        duration: true,
        id: true,
        price: true,
        routeName: true,
        source: true,

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/routes")
  async connectRoutes(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: RouteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      routes: {
        connect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/routes")
  async updateRoutes(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: RouteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      routes: {
        set: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/routes")
  async disconnectRoutes(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: RouteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      routes: {
        disconnect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/stationExitPapers")
  @ApiNestedQuery(StationExitPaperFindManyArgs)
  async findStationExitPapers(
    @common.Req() request: Request,
    @common.Param() params: StationWhereUniqueInput
  ): Promise<StationExitPaper[]> {
    const query = plainToClass(StationExitPaperFindManyArgs, request.query);
    const results = await this.service.findStationExitPapers(params.id, {
      ...query,
      select: {
        createdAt: true,
        driverName: true,
        exitDate: true,
        id: true,
        licenseNumber: true,

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        vehicle: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stationExitPapers")
  async connectStationExitPapers(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: StationExitPaperWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stationExitPapers: {
        connect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stationExitPapers")
  async updateStationExitPapers(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: StationExitPaperWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stationExitPapers: {
        set: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stationExitPapers")
  async disconnectStationExitPapers(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: StationExitPaperWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stationExitPapers: {
        disconnect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tickets")
  @ApiNestedQuery(TicketFindManyArgs)
  async findTickets(
    @common.Req() request: Request,
    @common.Param() params: StationWhereUniqueInput
  ): Promise<Ticket[]> {
    const query = plainToClass(TicketFindManyArgs, request.query);
    const results = await this.service.findTickets(params.id, {
      ...query,
      select: {
        createdAt: true,
        fullName: true,
        id: true,
        journeyDate: true,
        phoneNumber: true,
        price: true,

        route: {
          select: {
            id: true,
          },
        },

        seatNumber: true,

        station: {
          select: {
            id: true,
          },
        },

        ticketNumber: true,
        updatedAt: true,
        vehicle: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tickets")
  async connectTickets(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        connect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tickets")
  async updateTickets(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        set: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tickets")
  async disconnectTickets(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        disconnect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: StationWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  async connectUsers(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  async updateUsers(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  async disconnectUsers(
    @common.Param() params: StationWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateStation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
