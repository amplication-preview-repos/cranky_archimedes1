/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Station } from "./Station";
import { StationCountArgs } from "./StationCountArgs";
import { StationFindManyArgs } from "./StationFindManyArgs";
import { StationFindUniqueArgs } from "./StationFindUniqueArgs";
import { CreateStationArgs } from "./CreateStationArgs";
import { UpdateStationArgs } from "./UpdateStationArgs";
import { DeleteStationArgs } from "./DeleteStationArgs";
import { BusFindManyArgs } from "../../bus/base/BusFindManyArgs";
import { Bus } from "../../bus/base/Bus";
import { RouteFindManyArgs } from "../../route/base/RouteFindManyArgs";
import { Route } from "../../route/base/Route";
import { StationExitPaperFindManyArgs } from "../../stationExitPaper/base/StationExitPaperFindManyArgs";
import { StationExitPaper } from "../../stationExitPaper/base/StationExitPaper";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { StationService } from "../station.service";
@graphql.Resolver(() => Station)
export class StationResolverBase {
  constructor(protected readonly service: StationService) {}

  async _stationsMeta(
    @graphql.Args() args: StationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Station])
  async stations(
    @graphql.Args() args: StationFindManyArgs
  ): Promise<Station[]> {
    return this.service.stations(args);
  }

  @graphql.Query(() => Station, { nullable: true })
  async station(
    @graphql.Args() args: StationFindUniqueArgs
  ): Promise<Station | null> {
    const result = await this.service.station(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Station)
  async createStation(
    @graphql.Args() args: CreateStationArgs
  ): Promise<Station> {
    return await this.service.createStation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Station)
  async updateStation(
    @graphql.Args() args: UpdateStationArgs
  ): Promise<Station | null> {
    try {
      return await this.service.updateStation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Station)
  async deleteStation(
    @graphql.Args() args: DeleteStationArgs
  ): Promise<Station | null> {
    try {
      return await this.service.deleteStation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Bus], { name: "buses" })
  async findBuses(
    @graphql.Parent() parent: Station,
    @graphql.Args() args: BusFindManyArgs
  ): Promise<Bus[]> {
    const results = await this.service.findBuses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Route], { name: "routes" })
  async findRoutes(
    @graphql.Parent() parent: Station,
    @graphql.Args() args: RouteFindManyArgs
  ): Promise<Route[]> {
    const results = await this.service.findRoutes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StationExitPaper], { name: "stationExitPapers" })
  async findStationExitPapers(
    @graphql.Parent() parent: Station,
    @graphql.Args() args: StationExitPaperFindManyArgs
  ): Promise<StationExitPaper[]> {
    const results = await this.service.findStationExitPapers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Ticket], { name: "tickets" })
  async findTickets(
    @graphql.Parent() parent: Station,
    @graphql.Args() args: TicketFindManyArgs
  ): Promise<Ticket[]> {
    const results = await this.service.findTickets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [User], { name: "users" })
  async findUsers(
    @graphql.Parent() parent: Station,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
