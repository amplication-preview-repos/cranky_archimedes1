/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StationExitPaperService } from "../stationExitPaper.service";
import { StationExitPaperCreateInput } from "./StationExitPaperCreateInput";
import { StationExitPaper } from "./StationExitPaper";
import { StationExitPaperFindManyArgs } from "./StationExitPaperFindManyArgs";
import { StationExitPaperWhereUniqueInput } from "./StationExitPaperWhereUniqueInput";
import { StationExitPaperUpdateInput } from "./StationExitPaperUpdateInput";

export class StationExitPaperControllerBase {
  constructor(protected readonly service: StationExitPaperService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StationExitPaper })
  async createStationExitPaper(
    @common.Body() data: StationExitPaperCreateInput
  ): Promise<StationExitPaper> {
    return await this.service.createStationExitPaper({
      data: {
        ...data,

        station: data.station
          ? {
              connect: data.station,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        driverName: true,
        exitDate: true,
        id: true,
        licenseNumber: true,

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        vehicle: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StationExitPaper] })
  @ApiNestedQuery(StationExitPaperFindManyArgs)
  async stationExitPapers(
    @common.Req() request: Request
  ): Promise<StationExitPaper[]> {
    const args = plainToClass(StationExitPaperFindManyArgs, request.query);
    return this.service.stationExitPapers({
      ...args,
      select: {
        createdAt: true,
        driverName: true,
        exitDate: true,
        id: true,
        licenseNumber: true,

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        vehicle: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StationExitPaper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stationExitPaper(
    @common.Param() params: StationExitPaperWhereUniqueInput
  ): Promise<StationExitPaper | null> {
    const result = await this.service.stationExitPaper({
      where: params,
      select: {
        createdAt: true,
        driverName: true,
        exitDate: true,
        id: true,
        licenseNumber: true,

        station: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        vehicle: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StationExitPaper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStationExitPaper(
    @common.Param() params: StationExitPaperWhereUniqueInput,
    @common.Body() data: StationExitPaperUpdateInput
  ): Promise<StationExitPaper | null> {
    try {
      return await this.service.updateStationExitPaper({
        where: params,
        data: {
          ...data,

          station: data.station
            ? {
                connect: data.station,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          driverName: true,
          exitDate: true,
          id: true,
          licenseNumber: true,

          station: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          vehicle: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StationExitPaper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStationExitPaper(
    @common.Param() params: StationExitPaperWhereUniqueInput
  ): Promise<StationExitPaper | null> {
    try {
      return await this.service.deleteStationExitPaper({
        where: params,
        select: {
          createdAt: true,
          driverName: true,
          exitDate: true,
          id: true,
          licenseNumber: true,

          station: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          vehicle: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
