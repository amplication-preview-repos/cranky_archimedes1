/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StationExitPaper as PrismaStationExitPaper,
  Station as PrismaStation,
} from "@prisma/client";

export class StationExitPaperServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StationExitPaperCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stationExitPaper.count(args);
  }

  async stationExitPapers(
    args: Prisma.StationExitPaperFindManyArgs
  ): Promise<PrismaStationExitPaper[]> {
    return this.prisma.stationExitPaper.findMany(args);
  }
  async stationExitPaper(
    args: Prisma.StationExitPaperFindUniqueArgs
  ): Promise<PrismaStationExitPaper | null> {
    return this.prisma.stationExitPaper.findUnique(args);
  }
  async createStationExitPaper(
    args: Prisma.StationExitPaperCreateArgs
  ): Promise<PrismaStationExitPaper> {
    return this.prisma.stationExitPaper.create(args);
  }
  async updateStationExitPaper(
    args: Prisma.StationExitPaperUpdateArgs
  ): Promise<PrismaStationExitPaper> {
    return this.prisma.stationExitPaper.update(args);
  }
  async deleteStationExitPaper(
    args: Prisma.StationExitPaperDeleteArgs
  ): Promise<PrismaStationExitPaper> {
    return this.prisma.stationExitPaper.delete(args);
  }

  async getStation(parentId: string): Promise<PrismaStation | null> {
    return this.prisma.stationExitPaper
      .findUnique({
        where: { id: parentId },
      })
      .station();
  }
}
